#!/bin/bash

# Script de v√©rification de la configuration NYOTA
# Usage: ./scripts/check-setup.sh

echo "üîç V√©rification de la configuration NYOTA"
echo "========================================"
echo ""

# Codes couleur
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Compteurs
ERRORS=0
WARNINGS=0

# Fonction de v√©rification
check() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
        ((ERRORS++))
    fi
}

warn() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((WARNINGS++))
}

# 1. V√©rifier la structure des dossiers
echo "üìÅ V√©rification de la structure des dossiers..."
[ -d "prisma" ] && check 0 "Dossier prisma/" || check 1 "Dossier prisma/ manquant"
[ -d "prisma/seeds" ] && check 0 "Dossier prisma/seeds/" || check 1 "Dossier prisma/seeds/ manquant"
[ -d "prisma/migrations" ] && check 0 "Dossier prisma/migrations/" || warn "Dossier prisma/migrations/ manquant (sera cr√©√© √† la premi√®re migration)"
[ -d "src" ] && check 0 "Dossier src/" || check 1 "Dossier src/ manquant"
[ -d "scripts" ] && check 0 "Dossier scripts/" || check 1 "Dossier scripts/ manquant"

echo ""

# 2. V√©rifier les fichiers essentiels
echo "üìÑ V√©rification des fichiers essentiels..."
[ -f "prisma/schema.prisma" ] && check 0 "Schema Prisma" || check 1 "Schema Prisma manquant"
[ -f "docker-compose.yml" ] && check 0 "Docker Compose" || check 1 "Docker Compose manquant"
[ -f ".env" ] && check 0 "Fichier .env" || check 1 "Fichier .env manquant"
[ -f "package.json" ] && check 0 "Package.json" || check 1 "Package.json manquant"
[ -f "tsconfig.json" ] && check 0 "TypeScript config" || check 1 "TypeScript config manquant"

echo ""

# 3. V√©rifier les fichiers de seed
echo "üå± V√©rification des fichiers de seed..."
[ -f "prisma/seeds/01-reference-data.seed.ts" ] && check 0 "Seed donn√©es de r√©f√©rence" || check 1 "Seed donn√©es de r√©f√©rence manquant"
[ -f "prisma/seeds/02-security-groups.seed.ts" ] && check 0 "Seed groupes de s√©curit√©" || check 1 "Seed groupes de s√©curit√© manquant"
[ -f "prisma/seeds/03-admin-user.seed.ts" ] && check 0 "Seed utilisateur admin" || check 1 "Seed utilisateur admin manquant"

echo ""

# 4. V√©rifier Docker
echo "üê≥ V√©rification de Docker..."
if command -v docker &> /dev/null; then
    check 0 "Docker install√©"
    
    # V√©rifier si les conteneurs sont en cours d'ex√©cution
    if docker-compose ps | grep -q "Up"; then
        check 0 "Services Docker en cours d'ex√©cution"
    else
        warn "Services Docker non d√©marr√©s. Ex√©cutez: docker-compose up -d"
    fi
else
    check 1 "Docker non install√©"
fi

echo ""

# 5. V√©rifier Node.js et npm
echo "üì¶ V√©rification de Node.js..."
if command -v node &> /dev/null; then
    NODE_VERSION=$(node -v)
    check 0 "Node.js install√© ($NODE_VERSION)"
else
    check 1 "Node.js non install√©"
fi

if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm -v)
    check 0 "npm install√© ($NPM_VERSION)"
else
    check 1 "npm non install√©"
fi

echo ""

# 6. V√©rifier les d√©pendances npm
echo "üìö V√©rification des d√©pendances..."
if [ -d "node_modules" ]; then
    check 0 "D√©pendances npm install√©es"
    
    # V√©rifier les d√©pendances critiques
    [ -d "node_modules/@prisma/client" ] && check 0 "Prisma Client" || warn "Prisma Client manquant. Ex√©cutez: npx prisma generate"
    [ -d "node_modules/ts-node" ] && check 0 "ts-node" || warn "ts-node manquant. Ex√©cutez: npm install"
else
    warn "D√©pendances non install√©es. Ex√©cutez: npm install"
fi

echo ""

# 7. V√©rifier la base de donn√©es
echo "üóÑÔ∏è V√©rification de la base de donn√©es..."
if [ -f ".env" ]; then
    if docker-compose exec -T postgres pg_isready -U nyota_admin &> /dev/null; then
        check 0 "PostgreSQL accessible"
        
        # V√©rifier si les migrations ont √©t√© ex√©cut√©es
        if [ -d "prisma/migrations" ] && [ "$(ls -A prisma/migrations)" ]; then
            check 0 "Migrations pr√©sentes"
        else
            warn "Aucune migration trouv√©e. Ex√©cutez: npx prisma migrate dev"
        fi
    else
        warn "PostgreSQL non accessible. V√©rifiez que Docker est d√©marr√©"
    fi
fi

# 8. V√©rifier Redis
echo ""
echo "üíæ V√©rification de Redis..."
if docker-compose exec -T redis redis-cli -a RedisNyota2024! ping &> /dev/null; then
    check 0 "Redis accessible"
else
    warn "Redis non accessible. V√©rifiez que Docker est d√©marr√©"
fi

echo ""
echo "========================================"
echo "üìä R√©sum√©:"
echo "  - Erreurs: $ERRORS"
echo "  - Avertissements: $WARNINGS"
echo ""

if [ $ERRORS -eq 0 ]; then
    if [ $WARNINGS -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Tout est correctement configur√©!${NC}"
        echo ""
        echo "üöÄ Vous pouvez maintenant:"
        echo "  1. Ex√©cuter les migrations: npx prisma migrate dev"
        echo "  2. Ex√©cuter les seeds: npm run seed:all"
        echo "  3. D√©marrer l'application: npm run start:dev"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Configuration fonctionnelle avec quelques avertissements${NC}"
        echo ""
        echo "Corrigez les avertissements ci-dessus pour une configuration optimale"
    fi
else
    echo -e "${RED}‚ùå Des erreurs doivent √™tre corrig√©es avant de continuer${NC}"
    echo ""
    echo "Consultez les erreurs ci-dessus et suivez les instructions"
fi

echo "========================================"