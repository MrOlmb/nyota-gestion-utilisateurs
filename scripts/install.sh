#!/bin/bash

# Script d'installation automatique du projet NYOTA
# Usage: chmod +x install.sh && ./install.sh

set -e

echo "üöÄ Installation du Module Gestion des Utilisateurs NYOTA"
echo "========================================================"
echo ""

# Fonction pour afficher les messages color√©s
print_success() {
    echo -e "\033[32m‚úÖ $1\033[0m"
}

print_error() {
    echo -e "\033[31m‚ùå $1\033[0m"
}

print_info() {
    echo -e "\033[34m‚ÑπÔ∏è  $1\033[0m"
}

# 1. V√©rification des pr√©requis
print_info "V√©rification des pr√©requis..."

if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas install√©"
    exit 1
fi

if ! command -v docker &> /dev/null; then
    print_error "Docker n'est pas install√©"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose n'est pas install√©"
    exit 1
fi

print_success "Tous les pr√©requis sont install√©s"

# 2. Installation des d√©pendances
print_info "Installation des d√©pendances npm..."
npm install
print_success "D√©pendances install√©es"

# 3. Cr√©ation de la structure des dossiers
print_info "Cr√©ation de la structure des dossiers..."
mkdir -p prisma/seeds
mkdir -p prisma/migrations
mkdir -p src/auth
mkdir -p src/users
mkdir -p src/security/{groups,permissions,visibility-rules,ui-rules}
mkdir -p src/cache
mkdir -p src/audit
mkdir -p src/common/{guards,interceptors,decorators,filters,dto}
mkdir -p src/database  # Garde le dossier pour les services Prisma
mkdir -p scripts
print_success "Structure des dossiers cr√©√©e"

# 4. Copier le sch√©ma Prisma si n√©cessaire
if [ ! -f "prisma/schema.prisma" ]; then
    print_info "D√©placement du schema.prisma..."
    if [ -f "schema.prisma" ]; then
        mv schema.prisma prisma/
        print_success "Schema Prisma d√©plac√©"
    else
        print_error "Fichier schema.prisma non trouv√©"
    fi
fi

# 5. D√©marrage des services Docker
print_info "D√©marrage des services Docker..."
docker-compose up -d

# Attendre que les services soient pr√™ts
print_info "Attente du d√©marrage des services..."
sleep 10

# V√©rifier PostgreSQL
until docker-compose exec -T postgres pg_isready -U nyota_admin &> /dev/null; do
    echo -n "."
    sleep 1
done
echo ""
print_success "PostgreSQL est pr√™t"

# V√©rifier Redis
until docker-compose exec -T redis redis-cli -a RedisNyota2024! ping &> /dev/null; do
    echo -n "."
    sleep 1
done
echo ""
print_success "Redis est pr√™t"

# 6. Configuration de Prisma
print_info "Configuration de Prisma..."
npx prisma generate
print_success "Client Prisma g√©n√©r√©"

# 7. Ex√©cution des migrations
print_info "Ex√©cution des migrations..."
npx prisma migrate dev --name init --skip-seed
print_success "Migrations ex√©cut√©es"

# 8. Installation de ts-node si n√©cessaire
if ! npm list ts-node &> /dev/null; then
    print_info "Installation de ts-node..."
    npm install --save-dev ts-node tsconfig-paths
    print_success "ts-node install√©"
fi

# 9. Ex√©cution des seeds
print_info "Insertion des donn√©es de r√©f√©rence..."
npm run seed:reference
print_success "Donn√©es de r√©f√©rence ins√©r√©es"

print_info "Cr√©ation des groupes de s√©curit√©..."
npm run seed:security
print_success "Groupes de s√©curit√© cr√©√©s"

print_info "Cr√©ation de l'utilisateur administrateur..."
npm run seed:admin
print_success "Utilisateur administrateur cr√©√©"

# 10. Affichage des informations
echo ""
echo "========================================"
echo "‚úÖ Installation termin√©e avec succ√®s!"
echo "========================================"
echo ""
echo "üìå Services disponibles:"
echo "  - PostgreSQL: localhost:5432"
echo "  - Redis: localhost:6379"
echo "  - PgAdmin: http://localhost:5050"
echo "  - Redis Commander: http://localhost:8081"
echo ""
echo "üë§ Compte administrateur:"
echo "  - Email: admin@nyota.gov"
echo "  - Mot de passe: AdminNyota2024!"
echo ""
echo "üöÄ Pour d√©marrer l'application:"
echo "  npm run start:dev"
echo ""
echo "üìö Pour voir la documentation:"
echo "  cat README_QUICKSTART.md"
echo "========================================"